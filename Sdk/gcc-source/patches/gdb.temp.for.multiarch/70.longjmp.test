Add new tests to confirm that longjmp works as expected.
Other minor housekeeping.

Fri Dec  3 10:07:20 PST 1999  Donn Terry <donnte@microsoft.com>
	* gdb.base/misc.exp: New file.
	* gdb.base/longjmp.c: New file.
	* gdb.base/list.exp: remove list0.h before copy (just in case).
	* gdb.base/twice.exp: remove twice.c before copy (just in case).

Index: src/gdb/testsuite/gdb.base/list.exp
===================================================================
RCS file: /dev/fs/H/rupp/devel-local-repository/src/gdb/testsuite/gdb.base/list.exp,v
retrieving revision 1.1.1.1
diff -p -u -r1.1.1.1 list.exp
--- src/gdb/testsuite/gdb.base/list.exp	2001/12/23 00:35:17	1.1.1.1
+++ src/gdb/testsuite/gdb.base/list.exp	2001/12/24 02:22:18
@@ -31,6 +31,7 @@ set testfile "list"
 set binfile ${objdir}/${subdir}/${testfile}
 
 # Need to download the header to the host.
+standard_file host delete list0.h
 remote_download host ${srcdir}/${subdir}/list0.h list0.h
 
 
Index: src/gdb/testsuite/gdb.base/longjmp.c
===================================================================
RCS file: longjmp.c
diff -N longjmp.c
--- /dev/null	Sun Dec 23 18:18:47 2001
+++ longjmp.c	Sun Dec 23 18:22:18 2001
@@ -0,0 +1,45 @@
+#include <setjmp.h>
+#include <stdio.h>
+
+int v1, v2;
+
+setjmp_f(jmp_buf jb)
+{
+   longjmp(jb, 99);
+   fprintf(stderr, "shouldn't get here\n");
+}
+
+sigsetjmp_f(jmp_buf jb)
+{
+   siglongjmp(jb, 98);
+   fprintf(stderr, "shouldn't get here\n");
+}
+
+dummy(){}
+
+int i=0;
+
+main()
+{
+    jmp_buf env;
+    int val;
+
+    if ((val = setjmp(env)) == 0) {
+	setjmp_f(env);
+        fprintf(stderr, "shouldn't get here, either\n");
+    }
+    else {
+	v1 = val;
+    }
+
+    if ((val = sigsetjmp(env,1)) == 0) {
+	sigsetjmp_f(env);
+        fprintf(stderr, "shouldn't get here, either\n");
+    }
+    else {
+	v2 = val;
+    }
+
+    dummy();
+    exit(0);
+}
Index: src/gdb/testsuite/gdb.base/misc.exp
===================================================================
RCS file: misc.exp
diff -N misc.exp
--- /dev/null	Sun Dec 23 18:24:01 2001
+++ misc.exp	Sun Dec 23 18:22:18 2001
@@ -0,0 +1,87 @@
+# Copyright (C) 1992, 1994, 1995, 1997 Free Software Foundation, Inc.
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
+
+# Please email any bugs, comments, and/or additions to this file to:
+# bug-gdb@prep.ai.mit.edu
+
+# This file was written by Donn Terry (donn@interix.com) derived from a
+# similar file by Fred Fish. (fnf@cygnus.com)
+
+if $tracelevel {
+    strace $tracelevel
+}
+
+set prms_id 0
+set bug_id 0
+
+# Create and source the file that provides information about the compiler
+# used to compile the test case.
+if [get_compiler_info ${binfile}] {
+    return -1;
+}
+
+
+#
+# Test for setjmp()/longjmp()
+#
+proc longjmp_func { } {
+    global gdb_prompt
+    global hex
+    global decimal
+    global gcc_compiled
+
+    if { ! [ runto main ] } then { gdb_suppress_tests; }
+
+    # single step until we get to dummy
+    # break doesn't work inside the -re's (tcl/expect bug?)
+    set done 0;
+    while (1) {
+       send_gdb "step\n";
+       gdb_expect {
+	  -re ".*dummy.*$gdb_prompt $" { set done 1}
+	  -re ".*The program is not being run.*" { set done 1 }
+	  -re ".*$gdb_prompt $" { }
+	  default { fail "single step to dummy"; set done 1 }
+
+       }
+       if { $done } break;
+    }
+
+    gdb_test "print v1" " = 99" "setjmp: print v1"
+    gdb_test "print v2" " = 98" "setjmp: print v2"
+
+    gdb_stop_suppressing_tests;
+}
+
+gdb_exit
+gdb_start
+gdb_reinitialize_dir $srcdir/$subdir
+gdb_load ${binfile}
+
+set testfile "longjmp"
+set srcfile ${testfile}.c
+set binfile ${objdir}/${subdir}/${testfile}
+if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != "" } {
+    perror "Couldn't compile ${srcfile}"
+    return -1
+}
+
+gdb_exit
+gdb_start
+gdb_reinitialize_dir $srcdir/$subdir
+gdb_load ${binfile}
+
+longjmp_func
Index: src/gdb/testsuite/gdb.base/twice.exp
===================================================================
RCS file: /dev/fs/H/rupp/devel-local-repository/src/gdb/testsuite/gdb.base/twice.exp,v
retrieving revision 1.1.1.1
diff -p -u -r1.1.1.1 twice.exp
--- src/gdb/testsuite/gdb.base/twice.exp	2001/12/23 00:35:19	1.1.1.1
+++ src/gdb/testsuite/gdb.base/twice.exp	2001/12/24 02:22:18
@@ -34,6 +34,7 @@ set fileid [open ${objdir}/${subdir}/${s
 puts $fileid "#include \"twice.c\"";
 close $fileid;
 
+standard_file host delete twice.c
 remote_download host ${srcdir}/${subdir}/twice.c twice.c
 
 if  { [gdb_compile "${objdir}/${subdir}/${srcfile}" "${binfile}" executable $options] != "" } {
