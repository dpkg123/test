The first patch to tc-i386.c un-reverts a DJ removal.  This needs to
be worked thru carefully.

There is a removed patch (see z18*) in write.c that might or might not
be required.  If it is, it will take careful rewriting.  However the
change 2000-08-18  Alexandre Oliva  <aoliva@redhat.com> needs to be tried
as is.

This is possibly (untested) "Mumit's bug".  In any case, if relocation
is against a symbol, don't apply the section stuff, it's wrong.

	* write.c (fixup_segment): Don't add value,
	handle section symbols specially (see bfd),
	* config/tc-i386.c (md_apply_fix3): no section special case for
	MS conformant PE.  (Flagged by STRICT_PE_FORMAT).
	(tc_gen_reloc): similarly.
	* config/te-interix.h: add STRICT_PE_FORMAT.

diff -drupP --exclude-from=//M/donn/diffs/exclude.files gas.orig/write.c gas/write.c
--- gas.orig/write.c	Fri Aug 20 14:00:50 1999
+++ gas/write.c	Fri Aug 20 14:01:24 1999
@@ -2695,7 +2695,13 @@ fixup_segment (fixP, this_segment)
 	    add_number += S_GET_VALUE (fixP->fx_addsy);
 	}
 
-      if (fixP->fx_pcrel)
+      /* if the relocation is against a section symbol, then 
+	 we need to adjust it for that.  However, if something
+	 prevented it from becoming a relocation against a section
+	 symbol (or this section symbol!), it's a Bad Thing to do this. */
+      if (fixP->fx_pcrel 
+	  && add_symbol_segment == this_segment
+	  && (fixP->fx_addsy == NULL || symbol_section_p(fixP->fx_addsy)))
 	{
 	  add_number -= MD_PCREL_FROM_SECTION (fixP, this_segment);
 	  if (!fixP->fx_done && fixP->fx_addsy == NULL)
diff -drupP --exclude-from=//M/donn/diffs/exclude.files gas.orig/config/tc-i386.c gas/config/tc-i386.c
--- gas.orig/config/tc-i386.c	Fri Aug 20 14:00:41 1999
+++ gas/config/tc-i386.c	Fri Aug 20 14:01:23 1999
@@ -1212,7 +1212,17 @@ tc_i386_fix_adjustable (fixP)
 #if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)
   if (OUTPUT_FLAVOR != bfd_target_elf_flavour)
     return 1;
-
+#endif
+#ifdef TE_PE
+    /* External (and weak) symbols are always themselves in PE */
+    if (S_IS_EXTERNAL (fixP->fx_addsy)
+	|| S_IS_WEAK (fixP->fx_addsy))
+      {
+	return 0;
+      }
+#endif
+
+#if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF) || defined (TE_PE)
   /* Don't adjust pc-relative references to merge sections in 64-bit
      mode.  */
   if (use_rela_relocations
@@ -4481,8 +4483,12 @@ md_estimate_size_before_relax (fragP, se
      an externally visible symbol, because it may be overridden by a
      shared library.  */
   if (S_GET_SEGMENT (fragP->fr_symbol) != segment
-#if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)
+#if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF) || defined (TE_PE)
+#if defined (TE_PE)  /* Coded this way for patch maintainablity only! */
+      || (true
+#else
       || (OUTPUT_FLAVOR == bfd_target_elf_flavour
+#endif
 	  && (S_IS_EXTERNAL (fragP->fr_symbol)
 	      || S_IS_WEAK (fragP->fr_symbol)))
 #endif
@@ -4808,8 +4808,34 @@
 	 address offset for a PC relative symbol.  */
       if (S_GET_SEGMENT (fixP->fx_addsy) != seg)
 	value += md_pcrel_from (fixP);
+      else if (S_IS_EXTERNAL (fixP->fx_addsy)
+	       || S_IS_WEAK (fixP->fx_addsy))
+	{
+	  /* We are generating an external relocation for this defined
+             symbol.  We add the address, because
+             bfd_install_relocation will subtract it.  VALUE already
+             holds the symbol value, because fixup_segment added it
+             in.  We subtract it out, and then we subtract it out
+             again because bfd_install_relocation will add it in
+             again.  */
+	  value += md_pcrel_from (fixP);
+	  value -= 2 * S_GET_VALUE (fixP->fx_addsy);
+	}
 #endif
     }
+#ifdef TE_PE
+  else if (fixP->fx_addsy != NULL
+	   && S_IS_DEFINED (fixP->fx_addsy)
+	   && (S_IS_EXTERNAL (fixP->fx_addsy)
+	       || S_IS_WEAK (fixP->fx_addsy)))
+    {
+      /* We are generating an external relocation for this defined
+         symbol.  VALUE already holds the symbol value, and
+         bfd_install_relocation will add it in again.  We don't want
+         either addition.  */
+      value -= 2 * S_GET_VALUE (fixP->fx_addsy);
+    }
+#endif
 
   /* Fix a few things - the dynamic linker expects certain values here,
      and we must not dissappoint it. */
diff -drupP --exclude-from=//M/donn/diffs/exclude.files gas.orig/config/tc-i386.c gas/config/tc-i386.c
--- gas.orig/config/tc-i386.c	Fri Aug 20 14:00:41 1999
+++ gas/config/tc-i386.c	Fri Aug 20 14:01:23 1999
@@ -4800,6 +4806,7 @@ md_apply_fix3 (fixP, valP, seg)
 #if defined (OBJ_COFF) && defined (TE_PE)
       /* For some reason, the PE format does not store a section
 	 address offset for a PC relative symbol.  */
+#ifndef STRICT_PE_FORMAT /* [ */
       if (S_GET_SEGMENT (fixP->fx_addsy) != seg)
 	value += md_pcrel_from (fixP);
       else if (S_IS_EXTERNAL (fixP->fx_addsy)
@@ -4815,8 +4822,10 @@ md_apply_fix3 (fixP, valP, seg)
 	  value += md_pcrel_from (fixP);
 	  value -= 2 * S_GET_VALUE (fixP->fx_addsy);
 	}
+#endif /* ] */
 #endif
     }
+#ifndef STRICT_PE_FORMAT /* [ */
 #ifdef TE_PE
   else if (fixP->fx_addsy != NULL
 	   && S_IS_DEFINED (fixP->fx_addsy)
@@ -4830,7 +4839,8 @@ md_apply_fix3 (fixP, valP, seg)
       value -= 2 * S_GET_VALUE (fixP->fx_addsy);
     }
 #endif
-
+#endif /* ] */
+
   /* Fix a few things - the dynamic linker expects certain values here,
      and we must not dissappoint it.  */
 #if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)
@@ -5422,7 +5432,20 @@ tc_gen_reloc (section, fixp)
       rel->howto = bfd_reloc_type_lookup (stdoutput, BFD_RELOC_32);
       assert (rel->howto != NULL);
     }
-
+#ifdef STRICT_PE_FORMAT
+  /*
+   * Ohhh, this is ugly.  The problem is that if this is a local global
+   * symbol, the relocation will entirely be performed at link time, not
+   * at assembly time.  bfd_install_reloc doesn't know about this sort
+   * of thing, and as a result we need to fake it out here.
+   *
+   * Note that if you change this as part of cleaning up the apalling
+   * mess of complementary adds/subtracts of which this is part, that
+   * bfd:coff_i386_reloc may need attention too.
+   */
+  if (S_IS_EXTERN (fixp->fx_addsy) && !S_IS_COMMON(fixp->fx_addsy))
+    rel->addend -= symbol_get_bfdsym (fixp->fx_addsy)->value;
+#endif
   return rel;
 }
 
diff -drupP --exclude-from=//M/donn/diffs/exclude.files gas.orig/config/te-interix.c gas/config/te-interix.h
--- gas.orig/config/te-interix.h	Fri Aug 20 14:00:41 1999
+++ gas/config/te-interix.c	Fri Aug 20 14:01:23 1999
@@ -11,4 +11,6 @@
 #define LOCAL_LABELS_FB 1
 #endif
 
+#define STRICT_PE_FORMAT
+
 #include "obj-format.h"
