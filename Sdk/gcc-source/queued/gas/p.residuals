diff -urpPd --exclude-from=exclude.files //Q/Gnusrc/cygwin.18/gas/config/obj-coff.c //D/home/donn.intel/gnu.intel/gas/config/obj-coff.c
--- //Q/Gnusrc/cygwin.18/gas/config/obj-coff.c	Mon Mar 15 18:13:16 1999
+++ //D/home/donn.intel/gnu.intel/gas/config/obj-coff.c	Sun May 23 00:23:15 1999
@@ -269,9 +269,9 @@ c_symbol_merge (debug, normal)
 	 into this further....  [raeburn:19920512.2209EST]  */
       alent *linenos;
       linenos = coffsymbol (normal->bsym)->lineno;
-      memcpy ((char *) &coffsymbol (normal->bsym)->native,
-	      (char *) &coffsymbol (debug->bsym)->native,
-	      S_GET_NUMBER_AUXILIARY(debug) * AUXESZ);
+      memcpy ((char *)(&coffsymbol (normal->bsym)->native[1]),
+              (char *)(&coffsymbol (debug->bsym)->native[1]),
+	      S_GET_NUMBER_AUXILIARY(debug) * sizeof(combined_entry_type));
       coffsymbol (normal->bsym)->lineno = linenos;
     }
 
@@ -332,8 +333,6 @@ void
 coff_obj_symbol_new_hook (symbolP)
      symbolS *symbolP;
 {
-  char underscore = 0;		/* Symbol has leading _ */
-
   {
     long sz = (OBJ_COFF_MAX_AUXENTRIES + 1) * sizeof (combined_entry_type);
     char *s = (char *) xmalloc (sz);
@@ -346,7 +345,7 @@ coff_obj_symbol_new_hook (symbolP)
 
   if (S_IS_STRING (symbolP))
     SF_SET_STRING (symbolP);
-  if (!underscore && S_IS_LOCAL (symbolP))
+  if (S_IS_LOCAL (symbolP))
     SF_SET_LOCAL (symbolP);
 }
 
@@ -636,8 +741,10 @@ obj_coff_endef (ignore)
 	  /* If it already is at the end of the symbol list, do nothing */
 	  if (def_symbol_in_progress != symbol_lastP)
 	    {
-	      symbol_remove (def_symbol_in_progress, &symbol_rootP, &symbol_lastP);
-	      symbol_append (def_symbol_in_progress, symbol_lastP, &symbol_rootP, &symbol_lastP);
+	      symbol_remove (def_symbol_in_progress, 
+                             &symbol_rootP, &symbol_lastP);
+	      symbol_append (def_symbol_in_progress, symbol_lastP, 
+                             &symbol_rootP, &symbol_lastP);
 	    }
 	}
     }
@@ -921,7 +1046,12 @@ coff_frob_symbol (symp, punt)
     block_stack = stack_init (512, sizeof (symbolS*));
 
   if (!S_IS_DEFINED (symp) && S_GET_STORAGE_CLASS (symp) != C_STAT)
-    S_SET_STORAGE_CLASS (symp, C_EXT);
+#ifdef TE_PE
+    if (symp->bsym->flags & BSF_WEAK)
+       S_SET_STORAGE_CLASS (symp, C_NT_WEAK);
+    else
+#endif
+       S_SET_STORAGE_CLASS (symp, C_EXT);
 
   if (!SF_GET_DEBUG (symp))
     {
@@ -1204,7 +1354,8 @@ obj_coff_section (ignore)
 
   if (flags != SEC_NO_FLAGS)
     {
-      if (! bfd_set_section_flags (stdoutput, sec, flags))
+      if (! bfd_set_section_flags (stdoutput, sec, 
+	  flags & bfd_applicable_section_flags (stdoutput)))
 	as_warn ("error setting flags for \"%s\": %s",
 		 bfd_section_name (stdoutput, sec),
 		 bfd_errmsg (bfd_get_error ()));
@@ -1213,6 +1364,57 @@ obj_coff_section (ignore)
   demand_empty_rest_of_line ();
 }
 
+#ifdef TE_PE
+/* Parse .weak directives, see BFD before enabling because MSVC
+   weak and gcc weak have different meanings */
+
+void
+obj_coff_weak (ignore)
+     int ignore;
+{
+  char *name;
+  int c;
+  symbolS *symbolP;
+  expressionS exp;
+
+  name = input_line_pointer;
+  c = get_symbol_end ();
+  symbolP = symbol_find_or_make (name);
+  *input_line_pointer = c;
+
+  SKIP_WHITESPACE ();
+
+  if (*input_line_pointer == ',')
+    {
+      if (S_IS_DEFINED (symbolP))
+	{
+	  as_bad ("Ignoring attempt to redefine symbol `%s'.",
+		  S_GET_NAME (symbolP));
+	  ignore_rest_of_line ();
+	  return;
+	}
+
+      ++input_line_pointer;
+      SKIP_WHITESPACE ();
+      if (! is_end_of_line[(unsigned char) *input_line_pointer])
+	{
+	  expression (&exp);
+	  if (exp.X_op != O_symbol)
+	    {
+	      as_bad ("bad .weak directive");
+	      ignore_rest_of_line();
+	      return;
+	    }
+	  symbolP->sy_value = exp;
+	}
+    }
+
+  S_SET_WEAK (symbolP);
+
+  demand_empty_rest_of_line ();
+}
+#endif
+
 void
 coff_adjust_symtab ()
 {
@@ -4298,6 +4597,9 @@ const pseudo_typeS obj_pseudo_table[] =
   /* FIXME: We ignore the MRI short attribute.  */
   {"section.s", obj_coff_section, 0},
   {"sect.s", obj_coff_section, 0},
+#if 0 //def TE_PE
+  {"weak", obj_coff_weak, 0},
+#endif
 #ifndef BFD_ASSEMBLER
   {"use", obj_coff_section, 0},
   {"text", obj_coff_text, 0},
diff -urpPd --exclude-from=exclude.files //Q/Gnusrc/cygwin.18/gas/config/tc-i386.c //D/home/donn.intel/gnu.intel/gas/config/tc-i386.c
--- //Q/Gnusrc/cygwin.18/gas/config/tc-i386.c	Mon Mar 15 18:13:19 1999
+++ //D/home/donn.intel/gnu.intel/gas/config/tc-i386.c	Sun May 23 00:23:20 1999
@@ -1955,7 +1956,8 @@ md_assemble (line)
 					== O_subtract))))
 			  {
 			    r_type = BFD_RELOC_386_GOTPC;
-			    i.imms[n]->X_add_number += 3;
+			    i.imms[n]->X_add_number += insn_size;
+			    pcrel = true; // benign
 			  }
 #endif
 			fix_new_exp (frag_now, p - frag_now->fr_literal, size,
diff -urpPd --exclude-from=exclude.files //Q/Gnusrc/cygwin.18/gas/doc/internals.texi //D/home/donn.intel/gnu.intel/gas/doc/internals.texi
--- //Q/Gnusrc/cygwin.18/gas/doc/internals.texi	Mon Mar 15 18:12:49 1999
+++ //D/home/donn.intel/gnu.intel/gas/doc/internals.texi	Sun May 23 00:23:28 1999
@@ -8,7 +8,13 @@
 This chapter describes the internals of the assembler.  It is incomplete, but
 it may help a bit.
 
-This chapter was last modified on $Date: 1997/02/23 04:01:40 $.  It is not updated regularly, and it
+<<<<<<< internals.texi.newdrop
+This chapter was last modified on $Date: 1997/05/27 15:07:11 $.  It is not updated regularly, and it
+||||||| internals.texi.top
+This chapter was last modified on $Date: 1997/05/27 15:07:11 $.  It is not updated regularly, and it
+=======
+This chapter was last modified on $Date: 1997/05/27 15:07:11 $.  It is not updated regularly, and it
+>>>>>>> internals.texi.top
 may be out of date.
 
 @menu
diff -urpPd --exclude-from=exclude.files //Q/Gnusrc/cygwin.18/gas/expr.c //D/home/donn.intel/gnu.intel/gas/expr.c
--- //Q/Gnusrc/cygwin.18/gas/expr.c	Mon Mar 15 18:13:25 1999
+++ //D/home/donn.intel/gnu.intel/gas/expr.c	Sun May 23 00:23:08 1999
@@ -35,7 +35,7 @@
 static void floating_constant PARAMS ((expressionS * expressionP));
 static void integer_constant PARAMS ((int radix, expressionS * expressionP));
 static void mri_char_constant PARAMS ((expressionS *));
-static void current_location PARAMS ((expressionS *));
+void current_location PARAMS ((expressionS *));
 static void clean_up_expression PARAMS ((expressionS * expressionP));
 static segT operand PARAMS ((expressionS *));
 static operatorT operator PARAMS ((void));
@@ -541,7 +542,7 @@ mri_char_constant (expressionP)
 /* Return an expression representing the current location.  This
    handles the magic symbol `.'.  */
 
-static void
+void
 current_location (expressionp)
      expressionS *expressionp;
 {
